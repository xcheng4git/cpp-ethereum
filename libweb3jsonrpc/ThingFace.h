#pragma once
/**
* This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
*/

#ifndef JSONRPC_CPP_STUB_THINGETH_H_
#define JSONRPC_CPP_STUB_THINGETH_H_

#include "ModularServer.h"

namespace dev {
	namespace rpc {
		class ThingFace : public ServerInterface<ThingFace>
		{
		public:
			ThingFace()
			{
				this->bindAndAddMethod(jsonrpc::Procedure("thing_sendEvidence", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1", jsonrpc::JSON_OBJECT, NULL), &dev::rpc::ThingFace::thing_sendEvidenceI);
				this->bindAndAddMethod(jsonrpc::Procedure("thing_getEvidenceByHash", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1", jsonrpc::JSON_STRING, NULL), &dev::rpc::ThingFace::thing_getEvidenceByHashI);
				this->bindAndAddMethod(jsonrpc::Procedure("thing_pendingEvidences", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY, NULL), &dev::rpc::ThingFace::thing_pendingEvidencesI);
			}

			inline virtual void thing_sendEvidenceI(const Json::Value &request, Json::Value &response)
			{
				response = this->thing_sendEvidence(request[0u]);
			}
			inline virtual void thing_getEvidenceByHashI(const Json::Value &request, Json::Value &response)
			{
				response = this->thing_getEvidenceByHash(request[0u].asString());
			}
			inline virtual void thing_pendingEvidencesI(const Json::Value &request, Json::Value &response)
			{
				(void)request;
				response = this->thing_pendingEvidences();
			}

			virtual std::string thing_sendEvidence(const Json::Value& param1) = 0;
			virtual Json::Value thing_getEvidenceByHash(const std::string& param1) = 0;
			virtual Json::Value thing_pendingEvidences() = 0;
		};
	}
}
#endif //JSONRPC_CPP_STUB_THINGETH_H_